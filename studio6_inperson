/*

// question 1 with remove_all


function remove_duplicates(lst){
    
    return accumulate((x,acc) => pair(x, remove_all(x, acc)),
                        null,
                        lst);
    
}


// question 1 with remove

function remove_duplicates(lst){
    
    return accumulate((x,acc) => pair(x, remove_all(x, acc)),
                        null,
                        lst);
    
}


// dont need to use remove_all cause remove will check everytime?


// question 1 with member

function remove_duplicates(lst){
    
    return accumulate(((x,acc) => is_null(member(x,acc)) ? pair(x,acc) : acc),
                        null,
                        lst);
    
}


remove_duplicates(list(1, 2, 3, 4, 4, 3, 2, 1, 2));

*/


/* my horrible answer not working:

// question 2

// either include in the set or not include in the set

function subsets(lst){
    
    // element can either be included in set or not be included in set
    
    function sub(lst, len){
        
        if (len === 0){
            return null;
        }
        
        else {
            
            function subsub(lst, len){
                
                return len === 0
                    ? null
                    : append(head(lst), subsub(tail(lst),len-1));
                
            }
            
            return append(list(subsub(lst, len)), list(sub(lst, len-1)));
        }
        
    }
    
    return sub(lst, length(lst)-1);
    
}

display_list(subsets(list(1, 2, 3)));

*/

// question 2: something that kinda works

function subsets(lst){
    
    return accumulate((h, t) => 
                        append(t, 
                                map(x => pair(h, x), t)),
                        list(null),
                        lst);
    
}

display_list(subsets(list(1, 2, 3)));

// method 1 : wishful thinking

// lets say we already solved subsets(list(2,3))
// then we want another copy and put 1 in front of each list


// list() is basically null

// method 2 given by TA

function subsets2(set){
    
    if (is_null(set)){
        return list(null);
    }
    
    else {
        
        const the_rest = subsets(tail(set));
        
        const included = map(x => pair(head(set), x), the_rest);
        
        return append(included, the_rest);
        
    }
    
}

display_list(subsets2(list(1, 2, 3)));

// time complexity - order of growth has to be atleast output set
// atleast 2^n
// space also atleast 2^n

// question 3 

// permutations


