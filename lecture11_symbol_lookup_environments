//
// environments
//

// represent environments in environment diagrams

// do this using frames
// frames has two lists
// list of names
// list of corresponding values

// make a pair of that
// head gives name, tail gives values

// environment structure that is outside the control and stash but related to both

function enclosing_environment(env) { return tail(env); }

function first_frame(env) { return head(env); }

const the_empty_environment = null;
// const the_global_environment = the_empty_environment;

// null is our empty environment
// the global environment is initially the empty environment

function make_frame(symbols, values) { return pair(symbols, values); }

function frame_symbols(frame) { return head(frame); }

function frame_values(frame) { return tail(frame); }


// extends the given encironment by taking
// given list of names, list of values and enclosing environment
// makes a new environment that extends the enclosing environement
// by making a new frame

// so environments are just lists of frames


function extend_environment(symbols, vals, base_env) {
    return length(symbols) === length(vals)
           ? pair(make_frame(symbols, vals), base_env)
           : length(symbols) < length(vals)
           ? error("too many arguments supplied: " + 
                   stringify(symbols) + ", " + 
                   stringify(vals))
           : error("too few arguments supplied: " + 
                   stringify(symbols) + ", " + 
                   stringify(vals));
}

function lookup_symbol_value(symbol, env) {
    function env_loop(env) {
        function scan(symbols, vals) {
            return is_null(symbols)
                   ? env_loop(enclosing_environment(env))
                   : symbol === head(symbols)
                   ? head(vals)
                   : scan(tail(symbols), tail(vals));
        }
        if (env === the_empty_environment) {
            error(symbol, "unbound name");
        } else {
            const frame = first_frame(env);
            return scan(frame_symbols(frame), frame_values(frame));
        }
    }
    return env_loop(env);
}

function assign_symbol_value(symbol, val, env) {
    function env_loop(env) {
        function scan(symbols, vals) {
            return is_null(symbols)
                   ? env_loop(enclosing_environment(env))
                   : symbol === head(symbols)
                   ? set_head(vals, val)
                   : scan(tail(symbols), tail(vals));
        } 
        if (env === the_empty_environment) {
            error(symbol, "unbound name -- assignment");
        } else {
            const frame = first_frame(env);
            return scan(frame_symbols(frame), frame_values(frame));
        }
    }
    return env_loop(env);
}

const test_env =
list(
    make_frame(list("a", "b", "c"),
               list(1,   2,   3)),
    make_frame(list("v", "w", "x"),
               list(4,   5,   42)),
    make_frame(list("y", "z"),
               list(7,   8)));

draw_data(test_env);

lookup_symbol_value("x", test_env);

