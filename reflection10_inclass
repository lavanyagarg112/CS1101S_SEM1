// reflection 10

// a stream is a null or a pair whose tail is a nullary function
// that returns a stream

// no base case required
// can be infinite


// fibonacci

function fibgen(a,b) {
    return pair(a, () => fibgen(b, a + b));
}

function stream_ref(s, n) {
  return n === 0 ? head(s) : stream_ref(stream_tail(s), n - 1);
}

function stream_tail(s){
    return tail(s)();
}

const fibs = fibgen(0,1);

stream_ref(fibs, 3);

// check this in stepper in source 2

// if we know our streams are infinite we can avoid base cases

const ones = pair(1, () => ones);

const add_streams = (s1, s2) =>
        pair(head(s1) + head(s2), () => add_streams(stream_tail(s1), stream_tail(s2)));
        
        
const integers = pair(1, () => add_streams(ones, integers));        
        
 
eval_stream(integers, 10);

function zip_streams(s1, s2){
    return pair(head(s1), () => zip_streams(s2, stream_tail(s1)));
}

function zip_list_of_streams(ss){
    return pair(head(head(ss)), () => zip_list_of_streams(append(tail(ss), list(stream_tail(head(ss))))));
}
// throwing the first stream at the back

eval_stream(zip_list_of_streams(list(ones, fibs, integers)), 20);






        
        