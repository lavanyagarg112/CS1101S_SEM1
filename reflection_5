// accumulate function abstraction (this is how it is predeclared in source)

function accumulate(op, initial, xs){
    return is_null(xs)
        ? initial
        : op(head(xs), accumulate(op, initial, tail(xs)));
}



// Question 1
// by abstraction
function flatten_list(lst){
    return accumulate(append, null, lst );
}

const LoL = list(list(1, 2), list(3, 4, 5, 6), null, list(7, 8, 9)); 

flatten_list(LoL);

// by wishful thinking
function flatten_lst(xs){
    return is_null(xs)
        ? null
        : append(head(xs), flatten_lst(tail(xs)));
}

// 4 lists in LoL list i.e. list of four list

// when we use draw data, its correct but can be a bit confusing

// accumulate is just an abstraction which can be used

// Question 2
function tree_sum2(t){
    return is_null(t)
        ? 0
        : ((is_list(head(t)) ? tree_sum2(head(t)) : head(t))
            + tree_sum2(tail(t)));
}

// Question 3
function accumulate_tree(f, op, initial, tree) {
    return accumulate(
             ((x,y) => op((
                    ! is_list(x)
                    ? f(x)
                    : accumulate_tree(f, op, initial, x)), y)),
             initial,
             tree);
}

function tree_sum(tree) {
    return accumulate_tree(x => x, (x, y) => x + y, 0 , tree);
}

function count_data_items(tree) {
    return accumulate_tree(x => 1, (x, y) => x + y, 0 , tree);
}

function flatten(tree) {
    return accumulate_tree(x => list(x), append, null , tree);
}

// Test
const tree1 = list(1, 2, list(3, 4), list(5, list(6, 7)));

const tree2 = list(1, list(list(8, 9), 10, list(11, list(12))), 
                   null, list(3, 4), list(5, list(6, 7)));

display( tree_sum(tree1) ); // Result: 28
display( tree_sum(tree2) ); // Result: 76

display( count_data_items(tree1) ); // Result: 7
display( count_data_items(tree2) ); // Result: 11

display_list( flatten(tree1) );
// Result: list(1, 2, 3, 4, 5, 6, 7)
display_list( flatten(tree2) );
// Result: list(1, 8, 9, 10, 11, 12, 3, 4, 5, 6, 7)
