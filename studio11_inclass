// see nb also

function stream_pairs(s) { 
    return is_null(s)
        ? null
        : stream_append(
            stream_map(
                sn => pair(head(s), sn),
                stream_tail(s)),
            stream_pairs(stream_tail(s)));
            
}

function integers(start, end){
    return start === end + 1
        ? null 
        : pair(start, () => integers(start + 1, end));
}

function stream_pairs2(s) { 
    return is_null(s)
           ? null
           : stream_append(
               stream_map(
                   sn => pair(head(s), sn),
                   stream_tail(s)),
               () => stream_pairs2(stream_tail(s)));
}

/*
function stream_pairs3(s) { 
    return stream_map(
                   sn => pair(head(s), sn),
                   stream_tail(s));
}
*/

// stream_pairs3 just remove the append???
// cause for infinite it is never going to go to append??

const test = integers(1,5);

eval_stream(stream_pairs(test),10);

// pair each element with another bigger element just once
// every combination, order doesnt matter
// handshake problem
// we have 5 ppl numbered 1 to 5, what are the diff handshakes

const s2 = stream_pairs2(integers_from(1));

// for stream_pairs, the stream_tail called continuously so 
// for infinite streams even that goes to infinity
// since has to evaluate tail first??

// in stream_pairs2 stream_tail is not called, so the error doesnt come up

//eval_stream(s2,10);