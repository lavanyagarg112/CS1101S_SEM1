// recursion

/*
function repeat_pattern(n,pat,init){
    return n===0
    ? init
    : pat(repeat_pattern(n-1,pat,init));
}

function square(x){
    return x*x;
}

repeat_pattern(3,square,2);
*/

/*

Recursive process:

The applications of pat are a result of the accumulation
by the recursion??
*/

// Alternate changes:

// applicative model

// iterative process: no deffered application

function repeat_pattern(n,pat,rune){
    return n===0
    ? rune
    : repeat_pattern(n-1,pat,pat(rune));
}

function square(x){
    return x*x;
}

repeat_pattern(3,square,2);