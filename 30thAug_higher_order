// f(x+y) = x(1+xy)^2 + y(1-y) + (1+xy)(1-y)

function square(n){
    return n * n;
}

function f(x, y){
    const a = 1 + x * y;
    const b = 1 - y;
    
    return (x * square(a)) + (y * b) + (1 + x * y)(b);
}

// runes

import {beside, stack, show, heart} from 'rune';

function fractal_1(rune, n){
    return n === 1
        ? rune
        : beside(rune,
                stack(fractal_1(rune, n - 1),
                fractal_1(rune, n - 1)));
            
}

show(fractal_1(heart,3));

// recursion in constant

/*
function fractal_2(rune, n){
    const smaller_frac = fractal_2(rune, n - 1); // local constant
    
    // we dont even get to exit through the conditional statement
    // cause the system immediately goes into recursion
    
    return n === 1
        ? rune
        : beside(rune,
            stack(smaller_frac,smaller_frac));
}
*/

// show(fractal_2(heart,3));

// we can do it in the conditional statement?

function fractal_2(rune, n){
    if (n === 1){
        return rune;
    } else {
        const smaller_frac = fractal_2(rune, n - 1);
        return beside(rune,
            stack(smaller_frac, smaller_frac));
    }
}

show(fractal_2(heart,3));

// a block can have local names defined only within that block



