/*

function remove_duplicates(lst){
    
    function nlst (lst, final){
        return is_null(lst)
            ? final 
            : !is_null(filter(x => x === head(lst), final))
            ? nlst(tail(lst), final)
            : nlst(tail(lst), append(final, list(head(lst))));
    }
    
    return nlst(lst, null);
    
    
}



remove_duplicates(list(1,2,3,2,3,5));
*/

/*
function remove_duplicates(xs){
    
    
    return is_null(xs)
        ? null 
        : pair(head(xs), 
                remove_duplicates(
                    filter(x => !equal(x, head(xs)), tail(xs))));
                    
                    // filtering the tail such that none of the 
                    // elements are equal to the head
}

remove_duplicates(list(1,2,3,2,3,5));
*/


function remove_duplicates(lst){
    return accumulate((h,t) => pair(h, filter(x => x !== h, t)), null, lst);
}

remove_duplicates(list(1,2,3,2,3,5));

// same as 2nd one but going right to left cause accumulate function
// but when q says to use a function, try to use it

// best solution is second solution 