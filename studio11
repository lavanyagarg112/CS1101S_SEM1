function scale_stream(c, stream) {
    return stream_map(x => c * x, stream);
}

const integers = integers_from(1);
const A = pair(1, () => scale_stream(2, A));

function mul_streams(a,b) {
    return pair(head(a) * head(b),
            () => mul_streams(stream_tail(a), stream_tail(b)));
}
const B = pair(1, () => mul_streams(B, integers));

eval_stream(A, 10); // 2^n-1
eval_stream(B, 10); // (n-1)! 
// where n is the nth term



// q2

function add_streams(s1, s2){
    return is_null(s1)
        ? s2
        : is_null(s2)
        ? s1 
        : pair(head(s1) + head(s2), () => add_streams(stream_tail(s1), stream_tail(s2)));
}

const add_series = add_streams;
const scale_series = scale_stream;

function negate_series(s) {
    return scale_series(-1, s);
}

function subtract_series(s1, s2) {
    return add_series(s1, negate_series(s2));
}

function coeffs_to_series(list_of_coeffs) {
    const zeros = pair(0, () => zeros);
        function iter(list) {
            return is_null(list)
                ? zeros
                : pair(head(list),
                        () => iter(tail(list)));
        }
    return iter(list_of_coeffs);
}

const non_neg_integers = integers_from(0);

function fun_to_series(fun) {
    return stream_map(fun, non_neg_integers);
}

const alt_ones = pair(1, () => negate_series(alt_ones)); 

eval_stream(alt_ones, 10);

const zeros = scale_stream(0, alt_ones);

eval_stream(zeros, 10);

const s1 = fun_to_series(x => 1);
eval_stream(s1, 10);

const s2 = fun_to_series(x => x + 1);
eval_stream(s2, 10);






