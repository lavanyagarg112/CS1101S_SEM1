function f(x){
    return () => x + 1;
}

const y = f(99);

// stores the computation only

// then at any time

y();

// sum of primes:

// say we want 2nd prime number between 10000 and 100000

/*
head(tail(filter(
    is_prime,
    enum_list(10000, 1000000)
)));
*/

// quite wasteful

// we want streams to stop when we get 2nd prime number


// A stream is either the empty list, or a pair whose tail is a nullary
// function that returns a stream

// 
const s3 =
pair(1,
() => pair(2,
() => pair(3,
() => null)));

// only one pair exists cause rest not called yet


// infinite stream

function ones_stream() {
    return pair(1, ones_stream); // not infinite recursion as tail not called
    // the tail would be called if we did ones_stream()
}

const ones = ones_stream(); // infinite sequence of 1

head(ones); // 1

//head(tail(ones)()); // 1

//head(tail(tail(ones)())()); // 1

// convenient function for evaluating

function steam_tail(stream){
    return tail(stream)();
}



function enum_stream(low, high){
    return low > high 
        ? null 
        : pair(low, () => enum_stream(low+1, high))
}

const s = enum_stream(1, 100);
head(s);
head(stream_tail(s));
head(stream_tail(stream_tail(s)));


function stream_ref(s, n){
    return n===0
        ? head(s)
        : stream_ref(stream_tail(s), n-1);
}

function stream_map(f, s){
    return is_null(s)
        ? null 
        : pair(f(head(s)), () => stream_map(f, steam_tail(s)));
}

function stream_filter(p, s){
    return is_null(s)
        ? null 
        : p(head(s))
        ? pair(head(s), () => stream_filter(p, stream_tail(s)))
        : stream_filter(p, stream_tail(s));
}

// Back to prime example



