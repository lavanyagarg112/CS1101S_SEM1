// pair(x,y) - returns pair made of x and y
// is_pair(p) - returns true iff p is a pair
// null - empty list
// is_null(xs) - returns true iff xs is the empty list null
// head(p)
// tail(p)
// list(x1,...,xn) - returns list

// it can be tedious to write a list manually with pair and null 

const first_denomination = list(100, 50, 20, 10, 5);

// binary function : function that accepts two parameters
// ternary function : 3
// unary function : 1
// nullary : zero parameters

// box notations

// pair(x,y) printed as [x,y]
// empty list as null 

// list notation

// same as box notation but for within the box notation, if we have a list structure, rather than showing the nested pairs, list notation would show a nicely formatted list(...)


// display_list(x)

display_list(pair(pair(pair(7,8), pair(1, pair(2, null))),6)); // gives list(...),6
display(pair(pair(pair(7,8), pair(1, pair(2, null))),6));

// box and pointer diagrams

draw_data(pair(1, pair(2, pair(3, null))));

// error reporting

// xs = 8;
// head(xs);

// how is the error displayed "nicely"? (as per the slides)


// length of a list

// length of empty list: 0
// length of non empty list: 1 + length of tail
// recursive process

function length(xs) {
    draw_data(xs);
    return is_null(xs)
        ? 0
        : 1 + length(tail(xs));
}

length(list(4,5,6));


// iterative version

function length_iter(xs) {
    
    function len(ys, counted_so_far) { // helper function
        return is_null(ys)
            ? counted_so_far
            : len(tail(ys), counted_so_far + 1);
    }
    
    return len(xs, 0);
}

