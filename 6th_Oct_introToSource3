/*

const num = 10; // indicated as := in CSE

let age = 18; // variables // indicated as : in CSE
age = age -10; 
display(age);

// substitution model breaks down

const speed = pair(2,3); // dont have to make it variable
set_head(speed, 3);
display(speed);

function factorial(n){
    let i = 1;
    let result = 1;
    while (i <= n){
        result = result * i;
        i = i + 1;
    }
    
    return result;
}

display(factorial(3));


let i = 10;
for(i = 8; i > 0; i = i - 1){
    display(i);
}

let name = "hi";
name = 8;
display(name);


//cannot do these
//let n2 = 9;
//const n2 = n2;
//n2 = const n2;



// order of evaluation matters now

// declarations return undefined
// eg: if const x = 10; is the only statement and if we run it
// Declarations are non-value-
//producing statements

// assignments are value producing

// evaluation of loops: when body not evaluated : undefined


// factorial

const n = 5;
let j = undefined;
let result = 1;
for (j = 1; j <= n; j = j+1){
    result = result * j;
}

// returns 120 value (not undefined like const)


// pair is mutable 


const a = list(1, 3, 5);
const b = list(2, 4);
const c = append(a, b);
display(c);

set_head(b, 9);
display(c);

// changing b changes c (pointer)

// destructive append
// no new pair must be created
// result is constructed from existing pairs of input lists 
*/


const x = list(1);
const y = list(2);
const z = append(x, y);
display(z);
set_head(x, 4); // for x doesnt change anything
// set_head(y, 4) // changes
display(z);
