//  q1

function apply_binary(operator, op1, op2) {
    return operator === "+"
           ? op1 + op2
           : operator === "-"
           ? op1 - op2 
           : operator === "*" 
           ? op1 * op2 
           : operator === "/" 
           ? op1 / op2
           : operator === "%" 
           ? math_hypot(op1, op2)
           ? math_sqrt(op1*op1 + op2*op2)
           : operator === "<" 
           ? op1 < op2
           : operator === ">" 
           ? op1 > op2
           : operator === "<=" 
           ? op1 <= op2
           : operator === ">=" 
           ? op1 >= op2
           : operator === "===" 
           ? op1 === op2
           : operator === "!==" 
           ? op1 !== op2
           : error(operator, "Unknown operator");
}

// yes it works for a % b % c

// but for example if it was math_pow(op1, op2)

// a ^ (b^c) is not same as (a ^ b)^c
// we need to do right to left 
// but here source does left to right 

// so here a % b % c not same

// parser is a black box for us rn (level 4 mod)
// cant do anything now

// q2

if (is_logical_composition(command)){
        if (logical_symbol(command) === "&&"){
            C = pair(make_conditional_expression(logical_composition_first_component(command),
                                logical_composition_second_component(command), make_literal(false)), C);
        }
            
        else {
                
            C = pair(make_conditional_expression(logical_composition_first_component(command),
                                make_literal(true), logical_composition_second_component(command)), C);
                
        }
}

// C is control in original program

// && can be written as 
/*
E1 ? E2 : false;
*/

// the syntax predicate
function is_logical_composition(component) {
    return is_tagged_list(component, "logical_composition");
}

// selectors
function logical_symbol(comp) {
    return list_ref(comp, 1);
}
function logical_composition_first_component(comp) {
    return list_ref(comp, 2);
}
function logical_composition_second_component(comp) {
    return list_ref(comp, 3);
}

// helper to make a conditional expression
function make_conditional_expression(pred, cons, alt) {
    return list("conditional_expression", pred, cons, alt);
}
// helper to make a literal value
function make_literal(value) {
    return list("literal", value);
}


// q3

// make parse a primitive function

const primitive_functions = list(
       list("head",    head             ),
       list("tail",    tail             ),
       list("pair",    pair             ),
       list("list",    list             ),
       list("is_null", is_null          ),
       list("display", display          ),
       list("error",   error            ),
       list("math_pow",math_pow         ),
       list("parse", parse              )
       );
       

// parse_and_evaluate(‘parse(’parse("1;");’);‘);
// last semicolon is for parse_and_evaluate
// second last for function call parse('parse("1;")');
// third last for function call parse("1;");
// last for the expression "1;"