// seive of eratosthenes

function is_divisible(x, y){
    return x % y === 0;
}

function seive(s){
    return pair(head(s), () => seive(stream_filter(x => !is_divisible(x, head(s)), stream_tail(s))));
}

const primes = seive(integers_from(2));

// square roots by newton's method

/*
function improve(guess, x){
    return average(guess, guess/x);
}

function sqrt_iter(guess, x){
    if (good_enough(guess, x)){ // we dont know what good_enough is?
        return guess;
    }
    
    else {
        return sqrt_iter(improve(guess, x), x);
    }
}


function sqrt(x) {
    return sqrt_iter(1.0, x);
}
*/

// using streams for iteration

function average(a,b){
    return (a + b)/2;
}

function improve(guess, x){
    return average(guess, x/guess);
    
}

function sqrt_stream(x){
    const guesses = pair(1.0, () => stream_map(guess => improve(guess, x), guesses));
    return guesses;
}

eval_stream(sqrt_stream(4), 6);


// approximating pi









