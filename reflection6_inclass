// question 1
// higher order function
// comparison parameter

// question 1 a
// wishful thinking
// wish we have a sorted version of the tail
// insert the head in the right position

// assuming the xs is always sorted

// for example is x is smaller than head
// check x < head
// insert head in beginning
// cause assuming our xs is already sorted so
// if x < head than x automatically becomes smallest

// question 1 c

// wishful thinking
// assuming that our list is reverse???
// write the condition as false always cause we want our x to be at the 
// end anyway

// question 1 d

// check which one is even and which one is odd
// 4 possibilities

// helper function

function compare(x,y){
    const is_even = x => x % 2 === 0;
    return is_even(x) && !is_even(y)
    ? true
    : !is_even(x) && is_even(y)
    ? false
    : is_even(x) && is_even(y)
    ? x < y
    : x > y
}

// case 1
// x is even
// head is odd
// assuming sorted list
// insert the even number at the starting
// return true

// case 2
// x is odd
// head is even
// skip the beginning
// return false

// case 3
// x is even
// head is even
// ascending order
// x < y 

// case 4
// x is odd
// head is odd
// descending order
// x > y

