// question 1
// higher order function
// comparison parameter

// question 1 a
// wishful thinking
// wish we have a sorted version of the tail
// insert the head in the right position

// assuming the xs is always sorted

// for example is x is smaller than head
// check x < head
// insert head in beginning
// cause assuming our xs is already sorted so
// if x < head than x automatically becomes smallest

// question 1 c

// wishful thinking
// assuming that our list is reverse???
// write the condition as false always cause we want our x to be at the 
// end anyway

// question 1 d

// check which one is even and which one is odd
// 4 possibilities

// helper function

function compare(x,y){
    const is_even = x => x % 2 === 0;
    return is_even(x) && !is_even(y)
    ? true
    : !is_even(x) && is_even(y)
    ? false
    : is_even(x) && is_even(y)
    ? x < y
    : x > y
}

// case 1
// x is even
// head is odd
// assuming sorted list
// insert the even number at the starting
// return true

// case 2
// x is odd
// head is even
// skip the beginning
// return false

// case 3
// x is even
// head is even
// ascending order
// x < y 

// case 4
// x is odd
// head is odd
// descending order
// x > y



// question 2

// example [8,1,7,2,6,3,5,4]

// take -

// [8 1 7 2]
// [8 1] -> drop
// [8] -> [8] [1] 
// [8][1] -> base case

// then merge base case

// [1 8]

// [8 1 7 2]
// [8 1] [7 2]
// [8][1][7][2]
// [1 8][2 7]

// then merge again 

// [1 2 7 8]

// [8 1 7 2][6 3 5 4]
// [8 1][7 2][6 3][5 4]
// [8][1][7][2][6][3][5][4]
// [ 1 2 7 8][3,6][4,5]

// [1 2 7 8][3 4 5 6]

// [1 2 3 4 5 6 7 8]

// programming take:

function take(xs, n){
    return n === 0
        ? null 
        : pair(head(xs), take(tail(xs), n-1));
}


function drop(xs,n){
    return n === 0
        ? xs 
        : drop(tail(xs), n-1);
}

// if we call take(4)
// call the function three times per call - call head, tail and pair
// 3 * (n/2)

// if we call drop(4)
// 1 * n/2 
// 1 cause only tail

// take + drop = 2n

// for merge sort

// 2.3.n/4 + 2.1.n/4 = c(n)
// in general log base 2 n steps
// here 3, n = 8 (assuming n is power of 2)

// merge sort: constant time + constant time for the null cases
// mid is also constant

// 3 steps -> base case -> 3 steps again (for merging)
// to merge the lists we need to use up both of the numbers
// constant amt of work to do the actual merging
// best case - go down through only one list = 1*(n/n) * n/2 times = theta(n)
// worst case - both list = 2*(n/n) * n/2 times = theta(n)

// order of growth 

// log n steps -> theta(n) each time
// again log n steps and so on...

// complexity: theta(nlogn)
// base case: theta(n)

